# contains different endcodings for peptide sequences

from typing import List, Any, Union, KeysView, Dict, Optional

# map containing the blomap values
blomap: Dict[str, List[float]] = {
    'A': [-0.57,  0.39, -0.96, -0.61, -0.69],
    'R': [-0.40, -0.83, -0.61,  1.26, -0.28],
    'N': [-0.70, -0.63, -1.47,  1.02,  1.06],
    'D': [-1.62, -0.52, -0.67,  1.02,  1.47],
    'C': [ 0.07,  2.04,  0.65, -1.13, -0.39],
    'Q': [-0.05, -1.50, -0.67,  0.49,  0.21],
    'E': [-0.64, -1.59, -0.39,  0.69,  1.04],
    'G': [-0.90,  0.87, -0.36,  1.08,  1.95],
    'H': [ 0.73, -0.67, -0.42,  1.13,  0.99],
    'I': [ 0.59,  0.79,  1.44, -1.90, -0.93],
    'L': [ 0.65,  0.84,  1.25, -0.99, -1.90],
    'K': [-0.64, -1.19, -0.65,  0.68, -0.13],
    'M': [ 0.76,  0.05,  0.06, -0.62, -1.59],
    'F': [ 1.87,  1.04,  1.28, -0.61, -0.16],
    'P': [-1.82, -0.63,  0.32,  0.03,  0.68],
    'S': [-0.39, -0.27, -1.51, -0.25,  0.31],
    'T': [-0.04, -0.30, -0.82, -1.02, -0.04],
    'W': [ 1.38,  1.69,  1.91,  1.07, -0.05],
    'Y': [ 1.75,  0.11,  0.65,  0.21, -0.41],
    'V': [-0.02,  0.30,  0.97, -1.55, -1.16]
}

blosum62 : Dict[str, List[int]] = {
    #      A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X
    'A': [ 4.0, -1.0, -2.0, -2.0,  0.0, -1.0, -1.0,  0.0, -2.0, -1.0, -1.0, -1.0, -1.0, -2.0, -1.0,  1.0,  0.0, -3.0, -2.0,  0.0, -2.0, -1.0,  0.0],
    'R': [-1.0,  5.0,  0.0, -2.0, -3.0,  1.0,  0.0, -2.0,  0.0, -3.0, -2.0,  2.0, -1.0, -3.0, -2.0, -1.0, -1.0, -3.0, -2.0, -3.0, -1.0,  0.0, -1.0],
    'N': [-2.0,  0.0,  6.0,  1.0, -3.0,  0.0,  0.0,  0.0,  1.0, -3.0, -3.0,  0.0, -2.0, -3.0, -2.0,  1.0,  0.0, -4.0, -2.0, -3.0,  3.0,  0.0, -1.0],
    'D': [-2.0, -2.0,  1.0,  6.0, -3.0,  0.0,  2.0, -1.0, -1.0, -3.0, -4.0, -1.0, -3.0, -3.0, -1.0,  0.0, -1.0, -4.0, -3.0, -3.0,  4.0,  1.0, -1.0],
    'C': [ 0.0, -3.0, -3.0, -3.0,  9.0, -3.0, -4.0, -3.0, -3.0, -1.0, -1.0, -3.0, -1.0, -2.0, -3.0, -1.0, -1.0, -2.0, -2.0, -1.0, -3.0, -3.0, -2.0],
    'Q': [-1.0,  1.0,  0.0,  0.0, -3.0,  5.0,  2.0, -2.0,  0.0, -3.0, -2.0,  1.0,  0.0, -3.0, -1.0,  0.0, -1.0, -2.0, -1.0, -2.0,  0.0,  3.0, -1.0],
    'E': [-1.0,  0.0,  0.0,  2.0, -4.0,  2.0,  5.0, -2.0,  0.0, -3.0, -3.0,  1.0, -2.0, -3.0, -1.0,  0.0, -1.0, -3.0, -2.0, -2.0,  1.0,  4.0, -1.0],
    'G': [ 0.0, -2.0,  0.0, -1.0, -3.0, -2.0, -2.0,  6.0, -2.0, -4.0, -4.0, -2.0, -3.0, -3.0, -2.0,  0.0, -2.0, -2.0, -3.0, -3.0, -1.0, -2.0, -1.0],
    'H': [-2.0,  0.0,  1.0, -1.0, -3.0,  0.0,  0.0, -2.0,  8.0, -3.0, -3.0, -1.0, -2.0, -1.0, -2.0, -1.0, -2.0, -2.0,  2.0, -3.0,  0.0,  0.0, -1.0],
    'I': [-1.0, -3.0, -3.0, -3.0, -1.0, -3.0, -3.0, -4.0, -3.0,  4.0,  2.0, -3.0,  1.0,  0.0, -3.0, -2.0, -1.0, -3.0, -1.0,  3.0, -3.0, -3.0, -1.0],
    'L': [-1.0, -2.0, -3.0, -4.0, -1.0, -2.0, -3.0, -4.0, -3.0,  2.0,  4.0, -2.0,  2.0,  0.0, -3.0, -2.0, -1.0, -2.0, -1.0,  1.0, -4.0, -3.0, -1.0],
    'K': [-1.0,  2.0,  0.0, -1.0, -3.0,  1.0,  1.0, -2.0, -1.0, -3.0, -2.0,  5.0, -1.0, -3.0, -1.0,  0.0, -1.0, -3.0, -2.0, -2.0,  0.0,  1.0, -1.0],
    'M': [-1.0, -1.0, -2.0, -3.0, -1.0,  0.0, -2.0, -3.0, -2.0,  1.0,  2.0, -1.0,  5.0,  0.0, -2.0, -1.0, -1.0, -1.0, -1.0,  1.0, -3.0, -1.0, -1.0],
    'F': [-2.0, -3.0, -3.0, -3.0, -2.0, -3.0, -3.0, -3.0, -1.0,  0.0,  0.0, -3.0,  0.0,  6.0, -4.0, -2.0, -2.0,  1.0,  3.0, -1.0, -3.0, -3.0, -1.0],
    'P': [-1.0, -2.0, -2.0, -1.0, -3.0, -1.0, -1.0, -2.0, -2.0, -3.0, -3.0, -1.0, -2.0, -4.0,  7.0, -1.0, -1.0, -4.0, -3.0, -2.0, -2.0, -1.0, -2.0],
    'S': [ 1.0, -1.0,  1.0,  0.0, -1.0,  0.0,  0.0,  0.0, -1.0, -2.0, -2.0,  0.0, -1.0, -2.0, -1.0,  4.0,  1.0, -3.0, -2.0, -2.0,  0.0,  0.0,  0.0],
    'T': [ 0.0, -1.0,  0.0, -1.0, -1.0, -1.0, -1.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, -2.0, -1.0,  1.0,  5.0, -2.0, -2.0,  0.0, -1.0, -1.0,  0.0],
    'W': [-3.0, -3.0, -4.0, -4.0, -2.0, -2.0, -3.0, -2.0, -2.0, -3.0, -2.0, -3.0, -1.0,  1.0, -4.0, -3.0, -2.0, 11.0,  2.0, -3.0, -4.0, -3.0, -2.0],
    'Y': [-2.0, -2.0, -2.0, -3.0, -2.0, -1.0, -2.0, -3.0,  2.0, -1.0, -1.0, -2.0, -1.0,  3.0, -3.0, -2.0, -2.0,  2.0,  7.0, -1.0, -3.0, -2.0, -1.0],
    'V': [ 0.0, -3.0, -3.0, -3.0, -1.0, -2.0, -2.0, -3.0, -3.0,  3.0,  1.0, -2.0,  1.0, -1.0, -2.0, -2.0,  0.0, -3.0, -1.0,  4.0, -3.0, -2.0, -1.0],
    'B': [-2.0, -1.0,  3.0,  4.0, -3.0,  0.0,  1.0, -1.0,  0.0, -3.0, -4.0,  0.0, -3.0, -3.0, -2.0,  0.0, -1.0, -4.0, -3.0, -3.0,  4.0,  1.0, -1.0],
    'Z': [-1.0,  0.0,  0.0,  1.0, -3.0,  3.0,  4.0, -2.0,  0.0, -3.0, -3.0,  1.0, -1.0, -3.0, -1.0,  0.0, -1.0, -3.0, -2.0, -2.0,  1.0,  4.0, -1.0],
    'X': [ 0.0, -1.0, -1.0, -1.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,  0.0,  0.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0]
}

# Index of the Amino acids for encoding
all_amino_acids: List[str] = \
    ['A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V','B','Z','X']

# converts the amino acid string to a list of
def twentybit_encode(amino_sequence: str) -> List[bool]:
    """
    encodes the amino acid sequences in len(amino_sequence)*20 bit long data
    :param amino_sequence:
    :return:
    """
    translated_amino_sequence : List[bool] = []
    for amino_acid in amino_sequence:
        translated_amino_acid : List[bool] = [False] * 20
        translated_amino_acid[all_amino_acids.index(amino_acid.upper())] = True
        translated_amino_sequence.extend(translated_amino_acid)
    return translated_amino_sequence


def blomap_encode(amino_sequence : str) -> List[float]:
    """
    encodes the amino acid sequences as floats from blomap
    :param amino_sequence: sequences containing the amino acids as string
    :return: list of sequences
    """
    translated_sequence : List[float] = []
    for amino_acid in amino_sequence:
        translated_sequence.extend(blomap[amino_acid.upper()])
    return translated_sequence

def blosum_encode(amino_sequence : str) -> List[int]:
    """
    Converts the amino sequence to a full BLOSUM 62 array
    :param amino_sequence:
    :return:
    """
    encoding = []
    for char in amino_sequence:
        encoding.extend(blosum62[char])
    return encoding
